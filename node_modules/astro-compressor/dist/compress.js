import { createReadStream, createWriteStream } from "node:fs";
import { readdir } from "node:fs/promises";
import { extname, resolve } from "node:path";
import { hrtime } from "node:process";
import { promises as stream } from "node:stream";
import { createBrotliCompress, createGzip } from "node:zlib";
async function* walkDir(dir, extensions) {
    const entries = await readdir(dir, { withFileTypes: true });
    for (const entry of entries) {
        const name = resolve(dir, entry.name);
        if (entry.isDirectory()) {
            yield* walkDir(name, extensions);
        }
        else if (filterFile(entry.name, extensions)) {
            yield name;
        }
    }
}
const filterFile = (file, extensions) => {
    return extensions.some((ext) => extname(file) === ext);
};
const compress = async (name, compressedFileNames, compressor, logger, { dir, extensions, batchSize, enabled }) => {
    if (!enabled) {
        logger.warn(`${name} compression disabled, skipping...`);
        return;
    }
    const start = hrtime.bigint();
    const files = [];
    for await (const file of walkDir(dir, extensions)) {
        files.push(file);
    }
    for (let i = 0; i < files.length; i += batchSize) {
        const batch = files.slice(i, i + batchSize);
        await Promise.all(batch.map(async (path) => {
            const source = createReadStream(path);
            const destination = createWriteStream(`${path}.${compressedFileNames}`);
            const comp = compressor();
            await stream.pipeline(source, comp, destination);
        }));
    }
    const end = hrtime.bigint();
    logger.info(`${name.padEnd(8, " ")} compressed ${files.length} files in ${(end - start) / BigInt(1000000)}ms`);
};
export const gzip = async (dir, logger, extensions, enabled, batchSize = 10) => {
    await compress("gzip", "gz", createGzip.bind({ level: 9 }), logger, { dir, extensions, enabled, batchSize });
};
export const brotli = async (dir, logger, extensions, enabled, batchSize = 10) => {
    await compress("brotli", "br", createBrotliCompress, logger, { dir, extensions, enabled, batchSize });
};
